# coding: utf-8
##############################################################################
# Copyright (C) 2021 Microchip Technology Inc. and its subsidiaries.
#
# Subject to your compliance with these terms, you may use Microchip software
# and any derivatives exclusively with Microchip products. It is your
# responsibility to comply with third party license terms applicable to your
# use of third party software (including open source software) that may
# accompany Microchip software.
#
# THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
# EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
# WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
# PARTICULAR PURPOSE.
#
# IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
# INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
# WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
# BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
# FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
# ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
# THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
##############################################################################

def instantiateComponent(component):
    sfd = component.createIntegerSymbol("SFD", None)
    sfd.setLabel("Start of Frame Delay")
    sfd.setMin(0)
    sfd.setMax(255)
    sfd.setDefaultValue(0)
    sfd.setDescription("Number of lines that are skipped at the beginning of the frame.")

    sld = component.createIntegerSymbol("SLD", None)
    sld.setLabel("Start of Line Delay")
    sld.setMin(0)
    sld.setMax(255)
    sld.setDefaultValue(0)
    sld.setDescription("Number of pixel clock periods to wait before the beginning of a line.")

    thresh = component.createKeyValueSetSymbol("ThresholdMask", None)
    thresh.setLabel("Threshold Mask")
    thresh.addKey("BEATS_4", "0", "Only 4 beats AHB burst allowed.")
    thresh.addKey("BEATS_8", "1", "Only 4 and 8 beats AHB burst allowed.")
    thresh.addKey("BEATS_16", "2", "4, 8, and 16 beats AHB burst allowed.")
    thresh.setDisplayMode("Key")
    thresh.setOutputMode("Key")
    thresh.setDefaultValue(0)
    thresh.setDescription("Configures the threshold mask setting.")

    fullMode = component.createBooleanSymbol("FullMode", None)
    fullMode.setLabel("Full Mode")
    fullMode.setDefaultValue(False)
    fullMode.setDescription("Full mode allows the preview and codec paths to operate simultaneously.")

    codecRequest = component.createBooleanSymbol("CodecRequest", None)
    codecRequest.setLabel("Codec Request Mode")
    codecRequest.setDefaultValue(False)
    codecRequest.setDescription("If false, the codec DMA interface requires manual restart after a transfer.")

    frate = component.createIntegerSymbol("FrameSkip", None)
    frate.setLabel("Frame Skip")
    frate.setMin(0)
    frate.setMax(255)
    frate.setDefaultValue(0)
    frate.setDescription("Indicates the number of preview frames that are skipped after every transfer.")

    crcCorrection = component.createBooleanSymbol("CRCCorrection", None)
    crcCorrection.setLabel("CRC Correction")
    crcCorrection.setDefaultValue(False)
    crcCorrection.setDescription("Enables frame CRC correction.")

    embSync = component.createKeyValueSetSymbol("EmbededSyncMode", None)
    embSync.setLabel("Embedded Synchronization Mode")
    embSync.addKey("HSYNC_VSYNC", "0", "Synchronization is performed using the HSYNC and VSYNC signals.")
    embSync.addKey("SAV_EAV", "1", "Synchronization is performed using the SAV/EAV method.")
    embSync.setDisplayMode("Key")
    embSync.setOutputMode("Key")
    embSync.setDefaultValue(0)
    embSync.setDescription("Configures the embedded synchronization mode.")

    clockPol = component.createComboSymbol("ClockPol", None, ["RISING", "FALLING"])
    clockPol.setLabel("Pixel Clock Polarity")
    clockPol.setDefaultValue("RISING")
    clockPol.setDescription("Configures the pixel clock polarity.")

    vsyncPol = component.createComboSymbol("VSYNCPol", None, ["ACTIVE_HIGH", "ACTIVE_LOW"])
    vsyncPol.setLabel("VSYNC Polarity")
    vsyncPol.setDefaultValue("ACTIVE_HIGH")
    vsyncPol.setDescription("Configures the VSYNC polarity.")

    hsyncPol = component.createComboSymbol("HSYNCPol", None, ["ACTIVE_HIGH", "ACTIVE_LOW"])
    hsyncPol.setLabel("HSYNC Polarity")
    hsyncPol.setDefaultValue("ACTIVE_HIGH")
    hsyncPol.setDescription("Configures the HSYNC polarity.")

    inputColorMode = component.createKeyValueSetSymbol("InputColorMode", None)
    inputColorMode.setLabel("Sensor Color Mode")
    inputColorMode.addKey("YCC_422_DEFAULT", "0", "YCC 422 Default Mode")
    inputColorMode.addKey("YCC_422_MODE1", "1", "YCC 422 Mode 1")
    inputColorMode.addKey("YCC_422_MODE2", "2", "YCC 422 Mode 2")
    inputColorMode.addKey("YCC_422_MODE3", "3", "YCC 422 Mode 3")
    inputColorMode.addKey("RGB_888_DEFAULT", "4", "RGB 888 Default Mode")
    inputColorMode.addKey("RGB_888_MODE1", "5", "RGB 888 Mode 1")
    inputColorMode.addKey("RGB_888_MODE2", "6", "RGB 888 Mode 2")
    inputColorMode.addKey("RGB_888_MODE3", "7", "RGB 888 Mode 3")
    inputColorMode.addKey("RGB_888_DEFAULT_SWAP", "8", "Swapped RGB 888 Default Mode")
    inputColorMode.addKey("RGB_888_MODE1_SWAP", "9", "Swapped RGB 888 Mode 1")
    inputColorMode.addKey("RGB_888_MODE2_SWAP", "10", "Swapped RGB 888 Mode 2")
    inputColorMode.addKey("RGB_888_MODE3_SWAP", "11", "Swapped RGB 888 Mode 3")
    inputColorMode.addKey("RGB_565_DEFAULT", "12", "RGB 565 Default Mode")
    inputColorMode.addKey("RGB_565_MODE1", "13", "RGB 565 Mode 1")
    inputColorMode.addKey("RGB_565_MODE2", "14", "RGB 565 Mode 2")
    inputColorMode.addKey("RGB_565_MODE3", "15", "RGB 565 Mode 3")
    inputColorMode.addKey("RGB_565_DEFAULT_SWAP", "16", "Swapped RGB 565 Default Mode")
    inputColorMode.addKey("RGB_565_MODE1_SWAP", "17", "Swapped RGB 565 Mode 1")
    inputColorMode.addKey("RGB_565_MODE2_SWAP", "18", "Swapped RGB 565 Mode 2")
    inputColorMode.addKey("RGB_565_MODE3_SWAP", "19", "Swapped RGB 565 Mode 3")
    inputColorMode.addKey("GS_8BIT", "20", "8 Bit Grayscale")
    inputColorMode.addKey("GS_12BIT", "21", "12 Bit Grayscale")
    inputColorMode.setDisplayMode("Key")
    inputColorMode.setOutputMode("Key")
    inputColorMode.setDefaultValue(0)
    inputColorMode.setDescription("Configures the input mode of the sensor.  Please refer to the datasheet for a detailed explanation of these modes.")

    inputHSize = component.createIntegerSymbol("InputHSize", None)
    inputHSize.setLabel("Sensor Horizontal Size")
    inputHSize.setMin(0)
    inputHSize.setMax(2047)
    inputHSize.setDefaultValue(2047)
    inputHSize.setDescription("The horizontal size of the input sensor data in pixels.")

    inputVSize = component.createIntegerSymbol("InputVSize", None)
    inputVSize.setLabel("Sensor Vertical Size")
    inputVSize.setMin(0)
    inputVSize.setMax(2047)
    inputVSize.setDefaultValue(2047)
    inputVSize.setDescription("The vertical size of the input sensor data in pixels.")

    prevHSize = component.createIntegerSymbol("PrevHSize", None)
    prevHSize.setLabel("Preview Horizontal Size")
    prevHSize.setMin(0)
    prevHSize.setMax(640)
    prevHSize.setDefaultValue(640)
    prevHSize.setDescription("The horizontal size of the preview images.")

    prevVSize = component.createIntegerSymbol("PrevVSize", None)
    prevVSize.setLabel("Preview Vertical Size")
    prevVSize.setMin(0)
    prevVSize.setMax(480)
    prevVSize.setDefaultValue(480)
    prevVSize.setDescription("The vertical size of the of the preview images.")
    
    prevBufCnt = component.createIntegerSymbol("PrevBufCnt", None)
    prevBufCnt.setLabel("Preview Buffer Count")
    prevBufCnt.setMin(1)
    prevBufCnt.setMax(3)
    prevBufCnt.setDefaultValue(3)
    prevBufCnt.setDescription("The number of buffers in the preview image chain.")
    
    codecBufCnt = component.createIntegerSymbol("CodecBufCnt", None)
    codecBufCnt.setLabel("Codec Buffer Count")
    codecBufCnt.setMin(1)
    codecBufCnt.setMax(3)
    codecBufCnt.setDefaultValue(3)
    codecBufCnt.setDescription("The number of buffers in the codec image chain.")

    #decFactor = component.createIntegerSymbol("DecFactor", None)
    #decFactor.setLabel("Decimation Factor")
    #decFactor.setMin(16)
    #decFactor.setMax(127)
    #decFactor.setDefaultValue(16)
    #decFactor.setDescription("The decimation factor defines the reduction scale of the preview image aspect ratio.")

    yuvRGBEnable = component.createBooleanSymbol("YUVtoRGB", None)
    yuvRGBEnable.setLabel("YUV to RGB Conversion Matrix")
    yuvRGBEnable.setDescription("Enables YUV to RGB Conversion Matrix")
    
    yuvCboff = component.createBooleanSymbol("YUVCboff", yuvRGBEnable)
    yuvCboff.setLabel("Cboff")
    yuvCboff.setDescription("Color Space Conversion Blue Chrominance Default Offset (Offset = 128)")
    
    yuvCroff = component.createBooleanSymbol("YUVCroff", yuvRGBEnable)
    yuvCroff.setLabel("Croff")
    yuvCroff.setDescription("Color Space Conversion Red Chrominance Default Offset (Offset = 128)")
    
    yuvCboff = component.createBooleanSymbol("YUVYoff", yuvRGBEnable)
    yuvCboff.setLabel("Yoff")
    yuvCboff.setDescription("Color Space Conversion Luminance Default Offset (Offset = 16)")
    
    yuvC0 = component.createIntegerSymbol("YUVC0", yuvRGBEnable)
    yuvC0.setLabel("C0")
    yuvC0.setMin(0)
    yuvC0.setMax(255)
    yuvC0.setDefaultValue(0)
    yuvC0.setDescription("C0 element default step is 1/128, ranges from 0 to 1.9921875")
    
    yuvC1 = component.createIntegerSymbol("YUVC1", yuvRGBEnable)
    yuvC1.setLabel("C1")
    yuvC1.setMin(0)
    yuvC1.setMax(255)
    yuvC1.setDefaultValue(0)
    yuvC1.setDescription("C1 element default step is 1/128, ranges from 0 to 1.9921875")
    
    yuvC2 = component.createIntegerSymbol("YUVC2", yuvRGBEnable)
    yuvC2.setLabel("C2")
    yuvC2.setMin(0)
    yuvC2.setMax(255)
    yuvC2.setDefaultValue(0)
    yuvC2.setDescription("C2 element default step is 1/128, ranges from 0 to 1.9921875")
    
    yuvC3 = component.createIntegerSymbol("YUVC3", yuvRGBEnable)
    yuvC3.setLabel("C3")
    yuvC3.setMin(0)
    yuvC3.setMax(255)
    yuvC3.setDefaultValue(0)
    yuvC3.setDescription("C3 element default step is 1/128, ranges from 0 to 1.9921875")
    
    yuvC4 = component.createIntegerSymbol("YUVC4", yuvRGBEnable)
    yuvC4.setLabel("C4")
    yuvC4.setMin(0)
    yuvC4.setMax(255)
    yuvC4.setDefaultValue(0)
    yuvC4.setDescription("C4 element default step is 1/128, ranges from 0 to 3.9921875")
    
    rgbYUVEnable = component.createBooleanSymbol("RGBtoYUV", None)
    rgbYUVEnable.setLabel("RGB to YUV Conversion Matrix")
    rgbYUVEnable.setDescription("Enables RGB to YUV Conversion Matrix")
    
    rgbROff = component.createBooleanSymbol("RGBROFF", rgbYUVEnable)
    rgbROff.setLabel("Roff")
    rgbROff.setDescription("Color Space Conversion Cr Component Offset (Offset = 16)")
    
    rgbGOff = component.createBooleanSymbol("RGBGOFF", rgbYUVEnable)
    rgbGOff.setLabel("Goff")
    rgbGOff.setDescription("Color Space Conversion Y Component Offset (Offset = 16)")
    
    rgbBOff = component.createBooleanSymbol("RGBBOFF", rgbYUVEnable)
    rgbBOff.setLabel("Boff")
    rgbBOff.setDescription("Color Space Conversion Cb Component Offset (Offset = 16)")
    
    rgbC0 = component.createIntegerSymbol("RGBC0", rgbYUVEnable)
    rgbC0.setLabel("C0")
    rgbC0.setMin(0)
    rgbC0.setMax(255)
    rgbC0.setDefaultValue(0)
    rgbC0.setDescription("C0 element default step is 1/256, from 0 to 0.49609375")
    
    rgbC1 = component.createIntegerSymbol("RGBC1", rgbYUVEnable)
    rgbC1.setLabel("C1")
    rgbC1.setMin(0)
    rgbC1.setMax(255)
    rgbC1.setDefaultValue(0)
    rgbC1.setDescription("C1 element default step is 1/128, from 0 to 0.9921875")
    
    rgbC2 = component.createIntegerSymbol("RGBC2", rgbYUVEnable)
    rgbC2.setLabel("C2")
    rgbC2.setMin(0)
    rgbC2.setMax(255)
    rgbC2.setDefaultValue(0)
    rgbC2.setDescription("C2 element default step is 1/512, from 0 to 0.2480468875")
    
    rgbC3 = component.createIntegerSymbol("RGBC3", rgbYUVEnable)
    rgbC3.setLabel("C3")
    rgbC3.setMin(0)
    rgbC3.setMax(255)
    rgbC3.setDefaultValue(0)
    rgbC3.setDescription("C3 element default step is 1/128, ranges from 0 to 0.9921875")
    
    rgbC4 = component.createIntegerSymbol("RGBC4", rgbYUVEnable)
    rgbC4.setLabel("C4")
    rgbC4.setMin(0)
    rgbC4.setMax(255)
    rgbC4.setDefaultValue(0)
    rgbC4.setDescription("C4 element default step is 1/256, ranges from 0 to 0.49609375")
    
    rgbC5 = component.createIntegerSymbol("RGBC5", rgbYUVEnable)
    rgbC5.setLabel("C5")
    rgbC5.setMin(0)
    rgbC5.setMax(255)
    rgbC5.setDefaultValue(0)
    rgbC5.setDescription("C5 element default step is 1/512, ranges from 0 to 0.2480468875")
    
    rgbC6 = component.createIntegerSymbol("RGBC6", rgbYUVEnable)
    rgbC6.setLabel("C6")
    rgbC6.setMin(0)
    rgbC6.setMax(255)
    rgbC6.setDefaultValue(0)
    rgbC6.setDescription("C6 element default step is 1/512, ranges from 0 to 0.2480468875")

    rgbC7 = component.createIntegerSymbol("RGBC7", rgbYUVEnable)
    rgbC7.setLabel("C7")
    rgbC7.setMin(0)
    rgbC7.setMax(255)
    rgbC7.setDefaultValue(0)
    rgbC7.setDescription("C7 element default step is 1/256, ranges from 0 to 0.49609375")
    
    rgbC8 = component.createIntegerSymbol("RGBC8", rgbYUVEnable)
    rgbC8.setLabel("C8")
    rgbC8.setMin(0)
    rgbC8.setMax(255)
    rgbC8.setDefaultValue(0)
    rgbC8.setDescription("C8 element default step is 1/128, ranges from 0 to 0.9921875")

    PLIB_ISI_C = component.createFileSymbol("PLIB_ISI_C", None)
    PLIB_ISI_C.setDestPath("peripheral/isi/")
    PLIB_ISI_C.setOutputName("plib_isi.c")
    PLIB_ISI_C.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/peripheral/isi")
    PLIB_ISI_C.setType("SOURCE")
    PLIB_ISI_C.setMarkup(False)
    PLIB_ISI_C.setSourcePath("src/plib_isi.c")
    
    PLIB_ISI_H = component.createFileSymbol("PLIB_ISI_H", None)
    PLIB_ISI_H.setDestPath("peripheral/isi/")
    PLIB_ISI_H.setOutputName("plib_isi.h")
    PLIB_ISI_H.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/peripheral/isi")
    PLIB_ISI_H.setType("HEADER")
    PLIB_ISI_H.setMarkup(False)
    PLIB_ISI_H.setSourcePath("inc/plib_isi.h")
    
    DRV_ISI_H = component.createFileSymbol("DRV_ISI_H", None)
    DRV_ISI_H.setDestPath("driver/isi/")
    DRV_ISI_H.setOutputName("drv_isi.h")
    DRV_ISI_H.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_H.setType("HEADER")
    DRV_ISI_H.setMarkup(False)
    DRV_ISI_H.setSourcePath("inc/drv_isi.h")
    
    DRV_ISI_C = component.createFileSymbol("DRV_ISI_C", None)
    DRV_ISI_C.setDestPath("driver/isi/")
    DRV_ISI_C.setOutputName("drv_isi.c")
    DRV_ISI_C.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_C.setType("SOURCE")
    DRV_ISI_C.setMarkup(False)
    DRV_ISI_C.setSourcePath("src/drv_isi.c")
    
    DRV_ISI_COMMON_H = component.createFileSymbol("DRV_ISI_COMMON_H", None)
    DRV_ISI_COMMON_H.setDestPath("driver/isi/")
    DRV_ISI_COMMON_H.setOutputName("drv_isi_common.h")
    DRV_ISI_COMMON_H.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_COMMON_H.setType("HEADER")
    DRV_ISI_COMMON_H.setMarkup(False)
    DRV_ISI_COMMON_H.setSourcePath("inc/drv_isi_common.h")
    
    DRV_ISI_CONFIG_H = component.createFileSymbol("DRV_ISI_CONFIG_H", None)
    DRV_ISI_CONFIG_H.setDestPath("driver/isi/")
    DRV_ISI_CONFIG_H.setOutputName("drv_isi_config.h")
    DRV_ISI_CONFIG_H.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_CONFIG_H.setType("HEADER")
    DRV_ISI_CONFIG_H.setMarkup(False)
    DRV_ISI_CONFIG_H.setSourcePath("inc/drv_isi_config.h")
    
    DRV_ISI_CONFIG_C = component.createFileSymbol("DRV_ISI_CONFIG_C", None)
    DRV_ISI_CONFIG_C.setDestPath("driver/isi/")
    DRV_ISI_CONFIG_C.setOutputName("drv_isi_config.c")
    DRV_ISI_CONFIG_C.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_CONFIG_C.setType("SOURCE")
    DRV_ISI_CONFIG_C.setMarkup(False)
    DRV_ISI_CONFIG_C.setSourcePath("src/drv_isi_config.c")
    
    DRV_ISI_INIT_H = component.createFileSymbol("DRV_ISI_INIT_H", None)
    DRV_ISI_INIT_H.setDestPath("driver/isi/")
    DRV_ISI_INIT_H.setOutputName("drv_isi_init.h")
    DRV_ISI_INIT_H.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_INIT_H.setType("HEADER")
    DRV_ISI_INIT_H.setMarkup(False)
    DRV_ISI_INIT_H.setSourcePath("inc/drv_isi_init.h")
    
    DRV_ISI_INIT_C = component.createFileSymbol("DRV_ISI_INIT_C", None)
    DRV_ISI_INIT_C.setDestPath("driver/isi/")
    DRV_ISI_INIT_C.setOutputName("drv_isi_init.c")
    DRV_ISI_INIT_C.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_INIT_C.setType("SOURCE")
    DRV_ISI_INIT_C.setMarkup(True)
    DRV_ISI_INIT_C.setSourcePath("src/drv_isi_init.c.ftl")
    
    DRV_ISI_PREVIEW_H = component.createFileSymbol("DRV_ISI_PREVIEW_H", None)
    DRV_ISI_PREVIEW_H.setDestPath("driver/isi/")
    DRV_ISI_PREVIEW_H.setOutputName("drv_isi_preview.h")
    DRV_ISI_PREVIEW_H.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_PREVIEW_H.setType("HEADER")
    DRV_ISI_PREVIEW_H.setMarkup(False)
    DRV_ISI_PREVIEW_H.setSourcePath("inc/drv_isi_preview.h")
    
    DRV_ISI_PREVIEW_C = component.createFileSymbol("DRV_ISI_PREVIEW_C", None)
    DRV_ISI_PREVIEW_C.setDestPath("driver/isi/")
    DRV_ISI_PREVIEW_C.setOutputName("drv_isi_preview.c")
    DRV_ISI_PREVIEW_C.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_PREVIEW_C.setType("SOURCE")
    DRV_ISI_PREVIEW_C.setMarkup(False)
    DRV_ISI_PREVIEW_C.setSourcePath("src/drv_isi_preview.c")
    
    DRV_ISI_CODEC_H = component.createFileSymbol("DRV_ISI_CODEC_H", None)
    DRV_ISI_CODEC_H.setDestPath("driver/isi/")
    DRV_ISI_CODEC_H.setOutputName("drv_isi_codec.h")
    DRV_ISI_CODEC_H.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_CODEC_H.setType("HEADER")
    DRV_ISI_CODEC_H.setMarkup(False)
    DRV_ISI_CODEC_H.setSourcePath("inc/drv_isi_codec.h")
    
    DRV_ISI_CODEC_C = component.createFileSymbol("DRV_ISI_CODEC_C", None)
    DRV_ISI_CODEC_C.setDestPath("driver/isi/")
    DRV_ISI_CODEC_C.setOutputName("drv_isi_codec.c")
    DRV_ISI_CODEC_C.setProjectPath("config/" + Variables.get("__CONFIGURATION_NAME") + "/driver/isi")
    DRV_ISI_CODEC_C.setType("SOURCE")
    DRV_ISI_CODEC_C.setMarkup(False)
    DRV_ISI_CODEC_C.setSourcePath("src/drv_isi_codec.c")

    SYS_DEFINITIONS_H = component.createFileSymbol("SYS_DEFINITIONS_H", None)
    SYS_DEFINITIONS_H.setType("STRING")
    SYS_DEFINITIONS_H.setOutputName("core.LIST_SYSTEM_DEFINITIONS_H_INCLUDES")
    SYS_DEFINITIONS_H.setSourcePath("templates/definitions.h.ftl")
    SYS_DEFINITIONS_H.setMarkup(True)

    SYS_INIT_C = component.createFileSymbol("SYS_INIT_C", None)
    SYS_INIT_C.setType("STRING")
    SYS_INIT_C.setOutputName("core.LIST_SYSTEM_INIT_C_SYS_INITIALIZE_DRIVERS")
    SYS_INIT_C.setSourcePath("templates/init.c.ftl")
    SYS_INIT_C.setMarkup(True)

    SYS_TASK_C = component.createFileSymbol("SYS_TASK_C", None)
    SYS_TASK_C.setType("STRING")
    SYS_TASK_C.setOutputName("core.LIST_SYSTEM_TASKS_C_CALL_DRIVER_TASKS")
    SYS_TASK_C.setSourcePath("templates/tasks.c.ftl")
    SYS_TASK_C.setMarkup(True)
